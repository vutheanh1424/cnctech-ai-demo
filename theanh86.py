import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
import io
import asyncio
import requests
import uuid
import sqlite3
from sklearn.ensemble import RandomForestRegressor, IsolationForest
from sklearn.preprocessing import StandardScaler
from datetime import datetime
import json
try:
    from tensorflow.keras.models import Sequential, load_model
    from tensorflow.keras.layers import Dense, LSTM
except ImportError:
    Sequential = None
    LSTM = None
    Dense = None
    load_model = None
import threading
import time
import paho.mqtt.client as mqtt
import xml.etree.ElementTree as ET
import logging
from io import BytesIO
try:
    import seaborn as sns
    import matplotlib.pyplot as plt
except ImportError:
    sns = None
    plt = None
try:
    from fpdf import FPDF
except ImportError:
    FPDF = None
from cryptography.fernet import Fernet
if 'is_simulating' not in st.session_state:
    st.session_state.is_simulating = False
# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o kh√≥a m√£ h√≥a
key = Fernet.generate_key()
cipher = Fernet(key)

# C·∫•u h√¨nh giao di·ªán
st.set_page_config(
    page_title="CNCTech AI - L·∫≠p K·∫ø Ho·∫°ch & Gi√°m S√°t Th√¥ng Minh",
    page_icon="üè≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    [data-testid="stAppViewContainer"] {
        background: linear-gradient(135deg, #121212 0%, #1a1a1a 100%) !important;
        color: #ffffff !important;
        font-family: 'Roboto', sans-serif !important;
    }
    .main {
        padding: 20px !important;
    }
    [data-testid="stSidebar"] {
        background-color: #1e1e1e !important;
        border-right: 3px solid #d32f2f !important;
    }
    [data-testid="stSidebar"] * {
        color: #ffffff !important;
        font-size: 16px !important;
    }
    [data-testid="stHeader"] {
        background-color: transparent !important;
        border-bottom: 2px solid #d32f2f !important;
    }
    .nav-bar {
        background-color: #1e1e1e !important;
        padding: 12px !important;
        border-radius: 10px !important;
        margin-bottom: 20px !important;
        display: flex !important;
        justify-content: space-around !important;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3) !important;
    }
    .nav-bar a {
        color: #ffffff !important;
        text-decoration: none !important;
        padding: 10px 20px !important;
        border-radius: 8px !important;
        transition: all 0.3s ease !important;
        font-weight: 500 !important;
    }
    .nav-bar a:hover {
        background-color: #d32f2f !important;
        transform: scale(1.05) !important;
    }
    [data-testid="stMetric"] {
        background-color: #1e1e1e !important;
        border: 2px solid #d32f2f !important;
        border-radius: 12px !important;
        padding: 15px !important;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3) !important;
    }
    [data-testid="stMetricLabel"] {
        color: #d32f2f !important;
        font-weight: bold !important;
        font-size: 18px !important;
    }
    [data-testid="stMetricValue"] {
        color: #ffffff !important;
        font-size: 28px !important;
    }
    .stButton>button {
        background-color: #d32f2f !important;
        color: #ffffff !important;
        border-radius: 10px !important;
        border: none !important;
        padding: 12px 24px !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
    }
    .stButton>button:hover {
        background-color: #b71c1c !important;
        transform: translateY(-2px) !important;
    }
    input, textarea, select {
        background-color: #1e1e1e !important;
        color: #ffffff !important;
        border: 2px solid #d32f2f !important;
        border-radius: 8px !important;
        padding: 8px !important;
    }
    [data-testid="stTabs"] button {
        background-color: #1e1e1e !important;
        color: #ffffff !important;
        border-radius: 8px 8px 0 0 !important;
        padding: 10px !important;
    }
    [data-testid="tooltip"] {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }
    [data-testid="tooltip"] .tooltiptext {
        visibility: hidden;
        width: 220px;
        background-color: #d32f2f;
        color: #ffffff;
        text-align: center;
        border-radius: 8px;
        padding: 8px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -110px;
        opacity: 0;
        transition: opacity 0.4s;
    }
    [data-testid="tooltip"]:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
    .pulse {
        animation: pulse 2s infinite;
    }
    .card {
        background-color: #1e1e1e;
        border-radius: 12px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu SQLite
def init_db():
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        c = conn.cursor()
        
        # Create tables if they don't exist
        c.execute('''CREATE TABLE IF NOT EXISTS alerts
                     (id TEXT PRIMARY KEY, factory_id TEXT, time TEXT, message TEXT, status TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS configurations
                     (id TEXT PRIMARY KEY, factory_id TEXT, time TEXT, key TEXT, value TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS scenarios
                     (id TEXT PRIMARY KEY, time TEXT, scenario_name TEXT, parameters TEXT, results TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS mqtt_cache
                     (id TEXT PRIMARY KEY, factory_id TEXT, time TEXT, data TEXT)''')
        
        # Check and add factory_id column to scenarios table if missing
        c.execute("PRAGMA table_info(scenarios)")
        columns = [info[1] for info in c.fetchall()]
        if 'factory_id' not in columns:
            c.execute("ALTER TABLE scenarios ADD COLUMN factory_id TEXT")
            logger.info("Added factory_id column to scenarios table")
        
        conn.commit()
        logger.info("Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng")
        return True
    except Exception as e:
        logger.error(f"Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu: {e}")
        return False
    finally:
        conn.close()

init_db()

# Ti√™u ƒë·ªÅ
st.markdown("""
<div style='text-align: center; margin-bottom: 20px;'>
    <img src='https://via.placeholder.com/200x60.png?text=CNCTech+AI+Pro' alt='CNCTech Logo' class='pulse' style='max-width: 200px;'>
    <h1 style='color: #d32f2f; font-size: 32px; font-weight: bold;'>üè≠ CNCTech AI </h1>
    <p style='color: #ffffff; font-size: 18px;'>T·ªëi ∆∞u h√≥a & gi√°m s√°t s·∫£n xu·∫•t CNC b·∫±ng AI - Ph√°t tri·ªÉn b·ªüi < VU THE ANH ></p>
</div>
<div class='nav-bar'>
    <a href='#dashboard'>üè† Dashboard</a>
    <a href='#planning'>üì¶ L·∫≠p K·∫ø Ho·∫°ch</a>
    <a href='#performance'>üìä Hi·ªáu Su·∫•t</a>
    <a href='#maintenance'>üîß B·∫£o Tr√¨</a>
    <a href='#scenarios'>üî¨ K·ªãch B·∫£n</a>
    <a href='#guide'>üìñ H∆∞·ªõng D·∫´n</a>
</div>
""", unsafe_allow_html=True)

# Thanh ƒëi·ªÅu h∆∞·ªõng
st.sidebar.title("üìö Menu Ch·ª©c NƒÉng")
st.sidebar.markdown("S·∫£n ph·∫©m ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi DIM TEAM thu·ªôc IMS LAB:")
menu = st.sidebar.radio(
    "Ch·ªçn T√°c V·ª•:",
    [
        "üè† Dashboard T·ªïng Quan",
        "üì¶ L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t Th·ªß C√¥ng",
        "üì¶ L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t (ACO + RL)",
        "üìä Ph√¢n T√≠ch Hi·ªáu Su·∫•t & D·ª´ng M√°y",
        "üìà B√°o C√°o Hi·ªáu Su·∫•t Theo Ca",
        "üì• T√≠ch H·ª£p D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c",
        "üì§ Xu·∫•t B√°o C√°o ƒêa ƒê·ªãnh D·∫°ng",
        "üìå Bi·ªÉu ƒê·ªì Chu·ªói Nguy√™n C√¥ng",
        "üì© C·∫£nh B√°o Th√¥ng Minh Telegram",
        "üìã Ph√¢n T√≠ch Hi·ªáu Su·∫•t S√¢u",
        "üîß D·ª± ƒêo√°n B·∫£o Tr√¨ N√¢ng Cao",
        "‚è±Ô∏è M√¥ Ph·ªèng Th·ªùi Gian Th·ª±c",
        "üñºÔ∏è Digital Twin (3D)",
        "üî¨ Ph√¢n T√≠ch K·ªãch B·∫£n N√¢ng Cao",
        "üìà So S√°nh Hi·ªáu Su·∫•t AI",
        "üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng"
    ],
    captions=[
        "Theo d√µi m·ªçi ho·∫°t ƒë·ªông s·∫£n xu·∫•t",
        "T·∫°o l·ªãch s·∫£n xu·∫•t th·ªß c√¥ng nhanh ch√≥ng",
        "T·ªëi ∆∞u l·ªãch s·∫£n xu·∫•t b·∫±ng AI",
        "Ph√¢n t√≠ch hi·ªáu su·∫•t v√† th·ªùi gian d·ª´ng",
        "Xem chi ti·∫øt hi·ªáu su·∫•t theo ca",
        "T√≠ch h·ª£p d·ªØ li·ªáu t·ª´ file ho·∫∑c IoT",
        "Xu·∫•t b√°o c√°o Excel, JSON, XML, PDF",
        "Hi·ªÉn th·ªã quy tr√¨nh s·∫£n xu·∫•t",
        "Nh·∫≠n c·∫£nh b√°o t·ª©c th·ªùi qua Telegram",
        "Kh√°m ph√° nguy√™n nh√¢n g·ªëc r·ªÖ hi·ªáu su·∫•t",
        "D·ª± ƒëo√°n b·∫£o tr√¨ ch√≠nh x√°c",
        "M√¥ ph·ªèng s·∫£n xu·∫•t th·ªùi gian th·ª±c",
        "Hi·ªÉn th·ªã chuy·ªÉn ƒë·ªông c√¥ng c·ª• CNC 3D",
        "So s√°nh c√°c k·ªãch b·∫£n s·∫£n xu·∫•t",
        "ƒê√°nh gi√° c·∫£i ti·∫øn nh·ªù AI",
        "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt"
    ]
)

# Tr·∫°ng th√°i phi√™n
if 'realtime_data' not in st.session_state:
    st.session_state.realtime_data = []
if 'df_uploaded' not in st.session_state:
    st.session_state.df_uploaded = None
if 'realtime_data' not in st.session_state:
    st.session_state.realtime_data = []
if 'is_simulating' not in st.session_state:
    st.session_state.is_simulating = False
if 'rl_model_trained' not in st.session_state:
    st.session_state.rl_model_trained = False
if 'mqtt_data' not in st.session_state:
    st.session_state.mqtt_data = []
if 'scenario_history' not in st.session_state:
    st.session_state.scenario_history = []
if 'training_step' not in st.session_state:
    st.session_state.training_step = 0
if 'factory_id' not in st.session_state:
    st.session_state.factory_id = "FACTORY_01"
if 'sim_thread' not in st.session_state:
    st.session_state.sim_thread = None    

# H√†m h·ªó tr·ª£
def validate_realtime_data(data):
    required_fields = ["Ca", "S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]
    numeric_fields = ["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]
    for field in required_fields:
        if field not in data:
            return False
        if field in numeric_fields:
            if not isinstance(data[field], (int, float)) or data[field] < 0:
                return False
    return True

def preprocess_data(df):
    df = df.copy()
    df = df.fillna(0)
    downtime_cols = ["D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]
    available_cols = [col for col in downtime_cols if col in df.columns]
    if available_cols:
        df["T·ªïng d·ª´ng"] = df[available_cols].sum(axis=1)
    if "S·∫£n l∆∞·ª£ng (SP)" in df.columns and "T·ªïng d·ª´ng" in df.columns:
        df["Hi·ªáu su·∫•t (%)"] = ((df["S·∫£n l∆∞·ª£ng (SP)"] / (480 - df["T·ªïng d·ª´ng"])) * 100).round(1)
    features = ["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]
    scaler = None
    if all(col in df.columns for col in features):
        scaler = StandardScaler()
        scaler.fit(df[features])
    return df, scaler

@st.cache_resource
def init_rl_model(num_machines, num_jobs):
    if Sequential is None:
        logger.warning("M√¥ h√¨nh RL kh√¥ng kh·∫£ d·ª•ng do thi·∫øu TensorFlow")
        return None
    try:
        model = Sequential([
            Dense(128, activation='relu', input_shape=(num_machines + num_jobs,)),
            Dense(64, activation='relu'),
            Dense(num_machines, activation='softmax')
        ])
        model.compile(optimizer='adam', loss='mse')
        try:
            model = load_model('rl_model.h5')
            logger.info("ƒê√£ t·∫£i m√¥ h√¨nh RL hi·ªán c√≥")
        except:
            logger.info("Kh·ªüi t·∫°o m√¥ h√¨nh RL m·ªõi")
        return model
    except Exception as e:
        logger.error(f"Kh·ªüi t·∫°o m√¥ h√¨nh RL th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o m√¥ h√¨nh RL: {e}")
        return None

def train_rl_model(model, states, actions, rewards):
    if model is None:
        logger.warning("Kh√¥ng c√≥ m√¥ h√¨nh RL ƒë·ªÉ hu·∫•n luy·ªán")
        return None
    try:
        model.fit(states, rewards, epochs=10, verbose=0)
        model.save('rl_model.h5')
        logger.info("M√¥ h√¨nh RL ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán v√† l∆∞u")
        return model
    except Exception as e:
        logger.error(f"Hu·∫•n luy·ªán RL th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói hu·∫•n luy·ªán RL: {e}")
        return None

def adjust_aco_for_energy(job, machines, pheromones, processing_times, setup_times, power_rates, hour):
    probabilities = []
    for machine in machines:
        pheromone = pheromones.get((job, machine), 1.0)
        eta = 1.0 / (processing_times[job] + setup_times.get((job, machine), 1.0))
        energy_factor = 1.0 if hour % 24 in range(8, 18) else 0.5 / power_rates.get(machine, 1.0)
        probabilities.append((machine, pheromone * eta * energy_factor))
    return probabilities

def run_aco_schedule(num_jobs, num_machines, priorities=None, setup_times=None, power_rates=None, broken_machines=None):
    try:
        np.random.seed(42)
        jobs = [f"SP{i+1}" for i in range(num_jobs)]
        machines = [f"M{i+1}" for i in range(num_machines)]
        if broken_machines:
            machines = [m for m in machines if m not in broken_machines]
        priorities = priorities or {j: 1.0 for j in jobs}
        setup_times = setup_times or {(j, m): np.random.randint(1, 5) for j in jobs for m in machines}
        power_rates = power_rates or {m: np.random.uniform(0.5, 2.0) for m in machines}
        processing_times = {j: np.random.randint(10, 40) for j in jobs}
        energy_prices = {"peak": 0.15, "off_peak": 0.08}
        
        schedule = []
        timeline = {m: 0 for m in machines}
        pheromones = {(j, m): 1.0 for j in jobs for m in machines}
        
        for _ in range(100):
            available_jobs = jobs.copy()
            current_hour = int(timeline.get(machines[0], 0) / 60)
            while available_jobs:
                job = max(available_jobs, key=lambda x: priorities[x])
                probabilities = adjust_aco_for_energy(job, machines, pheromones, processing_times, setup_times, power_rates, current_hour)
                
                if not probabilities:
                    st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y m√°y ph√π h·ª£p cho s·∫£n ph·∫©m {job}")
                    return [], [], 0.0
                
                total = sum(prob[1] for prob in probabilities)
                probabilities = [(m, p/total if total > 0 else 1/len(probabilities)) for m, p in probabilities]
                
                machine = np.random.choice([p[0] for p in probabilities], p=[p[1] for p in probabilities])
                start = timeline[machine]
                duration = processing_times[job] + setup_times.get((job, machine), 1.0)
                schedule.append((machine, start, start + duration, job))
                timeline[machine] += duration
                pheromones[(job, machine)] = pheromones.get((job, machine), 1.0) * 1.5
                available_jobs.remove(job)
        
        energy_cost = 0
        for machine, start, end, job in schedule:
            if machine not in power_rates:
                power_rates[machine] = 1.0
            hours = np.arange(int(start/60), int(end/60) + 1)
            for h in hours:
                price = energy_prices["peak"] if 8 <= h % 24 <= 17 else energy_prices["off_peak"]
                energy_cost += processing_times[job] * power_rates[machine] * price
        
        return schedule, timeline, energy_cost
    
    except Exception as e:
        st.error(f"L·∫≠p l·ªãch ACO th·∫•t b·∫°i: {str(e)}")
        return [], [], 0.0

def plot_gantt_schedule(data):
    try:
        df = pd.DataFrame(data, columns=["M√°y", "B·∫Øt ƒë·∫ßu", "K·∫øt th√∫c", "S·∫£n ph·∫©m"])
        df['B·∫Øt ƒë·∫ßu'] = pd.to_datetime(df['B·∫Øt ƒë·∫ßu'], unit='m')
        df['K·∫øt th√∫c'] = pd.to_datetime(df['K·∫øt th√∫c'], unit='m')
        
        fig = px.timeline(
            df,
            x_start="B·∫Øt ƒë·∫ßu", 
            x_end="K·∫øt th√∫c", 
            y="M√°y", 
            color="S·∫£n ph·∫©m",
            title="üõ†Ô∏è Bi·ªÉu ƒê·ªì Gantt L·ªãch S·∫£n Xu·∫•t (ACO + RL)",
            hover_data={"B·∫Øt ƒë·∫ßu": "|%H:%M", "K·∫øt th√∫c": "|%H:%M", "S·∫£n ph·∫©m": True}
        )
        fig.update_yaxes(autorange="reversed", title="M√°y CNC")
        fig.update_xaxes(title="Th·ªùi Gian")
        fig.update_layout(
            hovermode="closest",
            showlegend=True,
            template="plotly_dark",
            font=dict(size=12),
            margin=dict(l=20, r=20, t=50, b=20)
        )
        logger.info("Bi·ªÉu ƒë·ªì Gantt ƒë√£ ƒë∆∞·ª£c t·∫°o")
        return fig, df
    except Exception as e:
        logger.error(f"L·ªói t·∫°o bi·ªÉu ƒë·ªì Gantt: {e}")
        st.error(f"‚ùå L·ªói bi·ªÉu ƒë·ªì Gantt: {e}")
        return None, None

def save_scenario_to_db(scenario_name, parameters, results, factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        c = conn.cursor()
        
        # Check if factory_id column exists
        c.execute("PRAGMA table_info(scenarios)")
        columns = [info[1] for info in c.fetchall()]
        scenario_id = str(uuid.uuid4())
        time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        if 'factory_id' in columns:
            c.execute("INSERT INTO scenarios (id, factory_id, time, scenario_name, parameters, results) VALUES (?, ?, ?, ?, ?, ?)",
                      (scenario_id, factory_id, time, scenario_name, json.dumps(parameters), json.dumps(results)))
        else:
            c.execute("INSERT INTO scenarios (id, time, scenario_name, parameters, results) VALUES (?, ?, ?, ?, ?)",
                      (scenario_id, time, scenario_name, json.dumps(parameters), json.dumps(results)))
        
        conn.commit()
        logger.info(f"ƒê√£ l∆∞u k·ªãch b·∫£n: {scenario_name}")
        return {"id": scenario_id, "factory_id": factory_id, "time": time, "scenario_name": scenario_name}
    except Exception as e:
        logger.error(f"L∆∞u k·ªãch b·∫£n th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói l∆∞u k·ªãch b·∫£n: {e}")
        return None
    finally:
        conn.close()

def load_alert_history(factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        df = pd.read_sql_query("SELECT * FROM alerts WHERE factory_id = ? ORDER BY time DESC", conn, params=(factory_id,))
        logger.info("ƒê√£ t·∫£i l·ªãch s·ª≠ c·∫£nh b√°o")
        return df
    except Exception as e:
        logger.error(f"T·∫£i l·ªãch s·ª≠ c·∫£nh b√°o th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói t·∫£i l·ªãch s·ª≠ c·∫£nh b√°o: {e}")
        return pd.DataFrame()
    finally:
        conn.close()
def save_alert_to_db(message, status, factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        c = conn.cursor()
        alert_id = str(uuid.uuid4())
        time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute(
            "INSERT INTO alerts (id, factory_id, time, message, status) VALUES (?, ?, ?, ?, ?)",
            (alert_id, factory_id, time_now, message, status)
        )
        conn.commit()
        logger.info(f"ƒê√£ l∆∞u c·∫£nh b√°o: {message} - {status}")
    except Exception as e:
        logger.error(f"L∆∞u c·∫£nh b√°o th·∫•t b·∫°i: {e}")
    finally:
        conn.close()        

def save_scenario_to_db(scenario_name, parameters, results, factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        c = conn.cursor()
        scenario_id = str(uuid.uuid4())
        time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO scenarios (id, factory_id, time, scenario_name, parameters, results) VALUES (?, ?, ?, ?, ?, ?)",
                  (scenario_id, factory_id, time, scenario_name, json.dumps(parameters), json.dumps(results)))
        conn.commit()
        logger.info(f"ƒê√£ l∆∞u k·ªãch b·∫£n: {scenario_name}")
        return {"id": scenario_id, "factory_id": factory_id, "time": time, "scenario_name": scenario_name}
    except Exception as e:
        logger.error(f"L∆∞u k·ªãch b·∫£n th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói l∆∞u k·ªãch b·∫£n: {e}")
        return None
    finally:
        conn.close()

def load_scenario_history(factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        df = pd.read_sql_query("SELECT * FROM scenarios WHERE factory_id = ? ORDER BY time DESC", conn, params=(factory_id,))
        logger.info("ƒê√£ t·∫£i l·ªãch s·ª≠ k·ªãch b·∫£n")
        return df
    except Exception as e:
        logger.error(f"T·∫£i l·ªãch s·ª≠ k·ªãch b·∫£n th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói t·∫£i l·ªãch s·ª≠ k·ªãch b·∫£n: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

def save_mqtt_to_db(data, factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        c = conn.cursor()
        mqtt_id = str(uuid.uuid4())
        time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO mqtt_cache (id, factory_id, time, data) VALUES (?, ?, ?, ?)",
                  (mqtt_id, factory_id, time, json.dumps(data)))
        conn.commit()
        logger.info("ƒê√£ l∆∞u d·ªØ li·ªáu MQTT v√†o b·ªô nh·ªõ cache")
    except Exception as e:
        logger.error(f"L∆∞u d·ªØ li·ªáu MQTT th·∫•t b·∫°i: {e}")
    finally:
        conn.close()

def load_mqtt_cache(factory_id="FACTORY_01"):
    try:
        conn = sqlite3.connect('cnc_pro_alerts.db')
        df = pd.read_sql_query("SELECT * FROM mqtt_cache WHERE factory_id = ? ORDER BY time DESC LIMIT 100", conn, params=(factory_id,))
        logger.info("ƒê√£ t·∫£i d·ªØ li·ªáu MQTT t·ª´ b·ªô nh·ªõ cache")
        return df
    except Exception as e:
        logger.error(f"T·∫£i d·ªØ li·ªáu MQTT th·∫•t b·∫°i: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

def send_telegram_alert(message):
    try:
        token = cipher.decrypt(st.secrets.get("telegram", {}).get("bot_token", "").encode()).decode()
        chat_id = st.secrets.get("telegram", {}).get("chat_id", "")
        if not token or not chat_id:
            status = "L·ªói: C·∫•u h√¨nh Telegram kh√¥ng h·ª£p l·ªá"
            save_alert_to_db(message, status)
            st.error("‚ùå Vui l√≤ng c·∫•u h√¨nh Telegram trong secrets!")
            return False
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {"chat_id": chat_id, "text": message}
        for attempt in range(3):
            try:
                r = requests.post(url, data=data, timeout=5)
                status = "Th√†nh c√¥ng" if r.status_code == 200 else f"L·ªói: {r.status_code}"
                save_alert_to_db(message, status)
                if r.status_code == 200:
                    st.success("üö® ƒê√£ g·ª≠i c·∫£nh b√°o Telegram!")
                    return True
                else:
                    st.error(f"‚ùå L·ªói g·ª≠i Telegram: {r.status_code}")
                    return False
            except requests.RequestException:
                time.sleep(2)
        status = "L·ªói: ƒê√£ ƒë·∫°t t·ªëi ƒëa s·ªë l·∫ßn th·ª≠"
        save_alert_to_db(message, status)
        st.error("‚ùå L·ªói g·ª≠i Telegram: ƒê√£ ƒë·∫°t t·ªëi ƒëa s·ªë l·∫ßn th·ª≠")
        return False
    except Exception as e:
        status = f"L·ªói: {str(e)}"
        save_alert_to_db(message, status)
        st.error(f"‚ùå L·ªói g·ª≠i Telegram: {e}")
        return False

@st.cache_resource
def init_predictive_models():
    try:
        rf_model = RandomForestRegressor(n_estimators=300, max_depth=20, random_state=42)
        iso_forest = IsolationForest(contamination=0.05, random_state=42)
        logger.info("Kh·ªüi t·∫°o m√¥ h√¨nh d·ª± ƒëo√°n th√†nh c√¥ng")
        return rf_model, iso_forest
    except Exception as e:
        logger.error(f"Kh·ªüi t·∫°o m√¥ h√¨nh d·ª± ƒëo√°n th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o m√¥ h√¨nh d·ª± ƒëo√°n: {e}")
        return None, None

def fetch_erp_data(endpoint, token):
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(endpoint, headers=headers, timeout=10)
        return pd.DataFrame(response.json())
    except Exception as e:
        logger.error(f"L·ªói l·∫•y d·ªØ li·ªáu ERP: {e}")
        st.error(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu ERP: {e}")
        return None

async def fetch_iot_data():
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            client.subscribe("cnc/machines/data")
            st.session_state.mqtt_data.append({"time": datetime.now(), "message": "ƒê√£ k·∫øt n·ªëi MQTT"})
            logger.info("ƒê√£ k·∫øt n·ªëi MQTT")
        else:
            st.session_state.mqtt_data.append({"time": datetime.now(), "message": f"K·∫øt n·ªëi MQTT th·∫•t b·∫°i: {rc}"})
            logger.error(f"K·∫øt n·ªëi MQTT th·∫•t b·∫°i: {rc}")
    def on_message(client, userdata, msg):
        try:
            data = json.loads(msg.payload.decode())
            if validate_realtime_data(data):
                st.session_state.mqtt_data.append({"time": datetime.now(), "data": data})
                save_mqtt_to_db(data)
                logger.info(f"Tin nh·∫Øn MQTT: {data}")
            else:
                st.session_state.mqtt_data.append({"time": datetime.now(), "message": f"D·ªØ li·ªáu MQTT kh√¥ng h·ª£p l·ªá"})
                logger.error("D·ªØ li·ªáu MQTT kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            st.session_state.mqtt_data.append({"time": datetime.now(), "message": f"L·ªói d·ªØ li·ªáu MQTT: {e}"})
            logger.error(f"L·ªói d·ªØ li·ªáu MQTT: {e}")
    try:
        client = mqtt.Client()
        client.on_connect = on_connect
        client.on_message = on_message
        for attempt in range(3):
            try:
                client.connect("broker.hivemq.com", 1883, 60)
                client.loop_start()
                await asyncio.sleep(5)
                client.loop_stop()
                logger.info("ƒê√£ l·∫•y d·ªØ li·ªáu MQTT")
                return
            except Exception:
                time.sleep(2)
        logger.error("K·∫øt n·ªëi MQTT th·∫•t b·∫°i: ƒê√£ ƒë·∫°t t·ªëi ƒëa s·ªë l·∫ßn th·ª≠")
        st.error("‚ùå L·ªói k·∫øt n·ªëi MQTT: ƒê√£ ƒë·∫°t t·ªëi ƒëa s·ªë l·∫ßn th·ª≠")
        mqtt_cache = load_mqtt_cache()
        if not mqtt_cache.empty:
            st.session_state.mqtt_data = [json.loads(row["data"]) for _, row in mqtt_cache.iterrows()]
            st.info("‚Ñπ ƒê√£ s·ª≠ d·ª•ng d·ªØ li·ªáu MQTT t·ª´ b·ªô nh·ªõ cache")
    except Exception as e:
        logger.error(f"K·∫øt n·ªëi MQTT th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói k·∫øt n·ªëi MQTT: {e}")

async def simulate_realtime_data():
    try:
        while st.session_state.get("is_simulating", False):
            new_data = {
                "Ca": np.random.choice(["S√°ng", "Chi·ªÅu", "T·ªëi"]),
                "S·∫£n l∆∞·ª£ng (SP)": np.random.randint(80, 150),
                "D·ª´ng do m√°y (ph√∫t)": np.random.randint(0, 20),
                "D·ª´ng do ng∆∞·ªùi (ph√∫t)": np.random.randint(0, 15),
                "D·ª´ng l√Ω do kh√°c (ph√∫t)": np.random.randint(0, 10),
                "Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            st.write("DEBUG new_data:", new_data)  # Th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra
            if validate_realtime_data(new_data):
                st.session_state.realtime_data.append(new_data)
                if len(st.session_state.realtime_data) > 100:
                    st.session_state.realtime_data.pop(0)
            await asyncio.sleep(3)
            logger.info("ƒê√£ m√¥ ph·ªèng d·ªØ li·ªáu th·ªùi gian th·ª±c")
    except Exception as e:
        logger.error(f"M√¥ ph·ªèng th·ªùi gian th·ª±c th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói m√¥ ph·ªèng th·ªùi gian th·ª±c: {e}")

def export_to_erp(df, format="json"):
    try:
        if format == "json":
            buffer = io.StringIO()
            df.to_json(buffer, orient="records", force_ascii=False)
            return buffer.getvalue(), f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", "application/json"
        elif format == "xml":
            buffer = io.StringIO()
            root = ET.Element("ProductionData")
            for _, row in df.iterrows():
                record = ET.SubElement(root, "Record")
                for col, val in row.items():
                    ET.SubElement(record, col.replace(" ", "_")).text = str(val)
            buffer.write(ET.tostring(root, encoding="unicode"))
            return buffer.getvalue(), f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xml", "application/xml"
        elif format == "excel":
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="ProductionReport")
                workbook = writer.book
                worksheet = writer.sheets["ProductionReport"]
                for col in worksheet.columns:
                    max_length = 0
                    column = col[0].column_letter
                    for cell in col:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = (max_length + 2)
                    worksheet.column_dimensions[column].width = adjusted_width
            return buffer.getvalue(), f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        elif format == "pdf" and FPDF:
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt="CNCTech AI Pro - B√°o C√°o S·∫£n Xu·∫•t", ln=True, align="C")
            pdf.ln(10)
            for i, row in df.iterrows():
                for col, val in row.items():
                    pdf.cell(50, 10, f"{col}: {val}", ln=True)
            buffer = BytesIO()
            pdf.output(buffer)
            return buffer.getvalue(), f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf", "application/pdf"
        logger.info(f"ƒê√£ xu·∫•t d∆∞·ªõi d·∫°ng {format}")
        return None, None, None
    except Exception as e:
        logger.error(f"Xu·∫•t b√°o c√°o th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói xu·∫•t b√°o c√°o: {e}")
        return None, None, None

def generate_heatmap(df):
    if sns is None or plt is None:
        logger.warning("Heatmap kh√¥ng kh·∫£ d·ª•ng do thi·∫øu Seaborn/Matplotlib")
        return None
    try:
        corr = df[["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]].corr()
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
        plt.title("T∆∞∆°ng Quan C√°c Y·∫øu T·ªë S·∫£n Xu·∫•t")
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png", bbox_inches="tight")
        plt.close()
        buffer.seek(0)
        logger.info("ƒê√£ t·∫°o heatmap")
        return buffer
    except Exception as e:
        logger.error(f"T·∫°o heatmap th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói heatmap: {e}")
        return None

@st.cache_resource
def init_lstm_model(timesteps=5, n_features=5):
    if Sequential is None:
        logger.warning("M√¥ h√¨nh LSTM kh√¥ng kh·∫£ d·ª•ng do thi·∫øu TensorFlow")
        return None
    try:
        model = Sequential([
            LSTM(100, activation='relu', input_shape=(timesteps, n_features), return_sequences=True),
            LSTM(50, activation='relu'),
            Dense(1)
        ])
        model.compile(optimizer='adam', loss='mse')
        logger.info("Kh·ªüi t·∫°o m√¥ h√¨nh LSTM th√†nh c√¥ng")
        return model
    except Exception as e:
        logger.error(f"Kh·ªüi t·∫°o m√¥ h√¨nh LSTM th·∫•t b·∫°i: {e}")
        st.error(f"‚ùå L·ªói kh·ªüi t·∫°o m√¥ h√¨nh LSTM: {e}")
        return None

def reshape_lstm_input(df, timesteps=5):
    features = ["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)", "T·ªïng d·ª´ng"]
    X = df[features].values
    if len(X) < timesteps:
        X = np.pad(X, ((timesteps - len(X), 0), (0, 0)), mode='constant')
    return X[-timesteps:].reshape(1, timesteps, len(features))

def parse_gcode(file):
    toolpath = {"x": [], "y": [], "z": []}
    for line in file:
        if line.startswith("G01"):
            parts = line.split()
            for part in parts:
                if part.startswith("X"): toolpath["x"].append(float(part[1:]))
                elif part.startswith("Y"): toolpath["y"].append(float(part[1:]))
                elif part.startswith("Z"): toolpath["z"].append(float(part[1:]))
    return toolpath

def check_reschedule_trigger(df):
    if df.empty:
        return False
    try:
        return df["T·ªïng d·ª´ng"].mean() > 30 or df["Hi·ªáu su·∫•t (%)"].mean() < 70
    except:
        return False

async def monitor_and_reschedule(jobs, machines, priorities, power_rates):
    try:
        while st.session_state.is_simulating:
            df_realtime = pd.DataFrame(st.session_state.realtime_data)
            if check_reschedule_trigger(df_realtime):
                broken_machines = df_realtime[df_realtime["D·ª´ng do m√°y (ph√∫t)"] > 60]["M√°y"].tolist() if "M√°y" in df_realtime.columns else []
                schedule, timeline, energy_cost = run_aco_schedule(
                    jobs=len(df_realtime["S·∫£n ph·∫©m"].unique()) if "S·∫£n ph·∫©m" in df_realtime.columns else jobs,
                    machines=machines,
                    priorities=priorities,
                    power_rates=power_rates,
                    broken_machines=broken_machines
                )
                if schedule:
                    fig, df_gantt = plot_gantt_schedule(schedule)
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                        st.success(f"‚è±Ô∏è L·ªãch s·∫£n xu·∫•t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {max(timeline.values())} ph√∫t")
                        send_telegram_alert(f"‚ö†Ô∏è L·ªãch s·∫£n xu·∫•t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t do b·∫•t th∆∞·ªùng trong d·ªØ li·ªáu th·ªùi gian th·ª±c!")
            await asyncio.sleep(60)
    except Exception as e:
        logger.error(f"L·ªói gi√°m s√°t v√† l·∫≠p l·∫°i l·ªãch: {e}")
        st.error(f"‚ùå L·ªói gi√°m s√°t v√† l·∫≠p l·∫°i l·ªãch: {e}")

# Logic menu
if menu == "üè† Dashboard T·ªïng Quan":
    with st.container():
        st.markdown("<div class='card'><h2>üè† Dashboard T·ªïng Quan</h2><p>Theo d√µi th·ªùi gian th·ª±c c√°c ho·∫°t ƒë·ªông s·∫£n xu·∫•t.</p></div>", unsafe_allow_html=True)
        st.markdown(f"**Th·ªùi Gian Hi·ªán T·∫°i**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        st.text_input("Factory ID", value=st.session_state.factory_id, key="factory_id", on_change=lambda: setattr(st.session_state, "factory_id", st.session_state.factory_id))
        if st.session_state.df_uploaded is not None:
            df, _ = preprocess_data(st.session_state.df_uploaded)
            if df is not None:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("T·ªïng S·∫£n L∆∞·ª£ng", f"{df['S·∫£n l∆∞·ª£ng (SP)'].sum():,}", help="T·ªïng s·ªë s·∫£n ph·∫©m ƒë∆∞·ª£c s·∫£n xu·∫•t")
                with col2:
                    df["T·ªïng d·ª´ng"] = df.iloc[:, 2:5].sum(axis=1)
                    st.metric("T·ªïng Th·ªùi Gian D·ª´ng", f"{df['T·ªïng d·ª´ng'].sum():,} ph√∫t", help="T·ªïng th·ªùi gian d·ª´ng m√°y")
                with col3:
                    df["Hi·ªáu su·∫•t (%)"] = ((df["S·∫£n l∆∞·ª£ng (SP)"] / (480 - df["T·ªïng d·ª´ng"])) * 100).round(1)
                    st.metric("Hi·ªáu Su·∫•t Trung B√¨nh", f"{df['Hi·ªáu su·∫•t (%)'].mean():.1f}%", help="Hi·ªáu su·∫•t trung b√¨nh c·ªßa ca")
                with col4:
                    availability = df["Hi·ªáu su·∫•t (%)"].mean() / 100
                    performance = min(df["S·∫£n l∆∞·ª£ng (SP)"].mean() / 150, 1.0)
                    quality = 0.95
                    oee = availability * performance * quality
                    st.metric("OEE", f"{oee*100:.1f}%", help="Hi·ªáu Su·∫•t Thi·∫øt B·ªã T·ªïng Th·ªÉ")
                st.markdown("<div class='card'><h3>üõ†Ô∏è Tr·∫°ng Th√°i M√°y CNC</h3></div>", unsafe_allow_html=True)
                status_data = {
                    "M√°y": [f"M{i+1}" for i in range(5)],
                    "Tr·∫°ng Th√°i": [np.random.choice(["Ho·∫°t ƒë·ªông", "D·ª´ng", "B·∫£o Tr√¨"]) for _ in range(5)],
                    "C√¥ng Su·∫•t (kW)": [np.random.uniform(0.5, 2.0) for _ in range(5)]
                }
                st.dataframe(pd.DataFrame(status_data).style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                st.markdown("<div class='card'><h3>üìä Lu·ªìng S·∫£n Xu·∫•t Theo Ca</h3></div>", unsafe_allow_html=True)
                sankey_data = {
                    "label": ["ƒê·∫ßu V√†o", "Ca S√°ng", "Ca Chi·ªÅu", "Ca T·ªëi", "ƒê·∫ßu Ra"],
                    "source": [0, 0, 0, 1, 2, 3],
                    "target": [1, 2, 3, 4, 4, 4],
                    "value": [
                        df[df["Ca"] == "S√°ng"]["S·∫£n l∆∞·ª£ng (SP)"].sum(),
                        df[df["Ca"] == "Chi·ªÅu"]["S·∫£n l∆∞·ª£ng (SP)"].sum(),
                        df[df["Ca"] == "T·ªëi"]["S·∫£n l∆∞·ª£ng (SP)"].sum(),
                        df[df["Ca"] == "S√°ng"]["S·∫£n l∆∞·ª£ng (SP)"].sum(),
                        df[df["Ca"] == "Chi·ªÅu"]["S·∫£n l∆∞·ª£ng (SP)"].sum(),
                        df[df["Ca"] == "T·ªëi"]["S·∫£n l∆∞·ª£ng (SP)"].sum()
                    ]
                }
                fig_sankey = go.Figure(data=[go.Sankey(
                    node=dict(label=sankey_data["label"], color="#d32f2f"),
                    link=dict(source=sankey_data["source"], target=sankey_data["target"], value=sankey_data["value"], color="#ffffff")
                )])
                fig_sankey.update_layout(
                    title="Lu·ªìng S·∫£n Xu·∫•t Theo Ca",
                    template="plotly_dark",
                    font=dict(size=12)
                )
                st.plotly_chart(fig_sankey, use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t√≠ch h·ª£p d·ªØ li·ªáu ƒë·ªÉ m·ªü kh√≥a to√†n b·ªô dashboard!", icon="‚ÑπÔ∏è")

elif menu == "üì¶ L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t Th·ªß C√¥ng":
    with st.container():
        st.markdown("<div class='card'><h2>üì¶ L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t Th·ªß C√¥ng</h2><p>T·∫°o l·ªãch s·∫£n xu·∫•t hi·ªáu qu·∫£ v·ªõi c√°c tham s·ªë t√πy ch·ªânh.</p></div>", unsafe_allow_html=True)
        with st.form("manual_planning_form"):
            col1, col2 = st.columns(2)
            with col1:
                slsp = st.number_input("S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m", min_value=1, value=100, step=1, help="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·∫ßn s·∫£n xu·∫•t")
                thoigian = st.slider("Th·ªùi Gian X·ª≠ L√Ω M·ªói S·∫£n Ph·∫©m (ph√∫t)", 5, 120, 30, help="Th·ªùi gian trung b√¨nh cho m·ªói s·∫£n ph·∫©m")
            with col2:
                somay = st.slider("S·ªë M√°y CNC", 1, 250, 100, help="S·ªë m√°y CNC c√≥ s·∫µn")
                deadline = st.slider("Th·ªùi H·∫°n Giao H√†ng (gi·ªù)", 1, 168, 24, help="Th·ªùi gian t·ªëi ƒëa ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng")
            submitted = st.form_submit_button("üß† T·∫°o K·∫ø Ho·∫°ch")
            if submitted:
                if slsp <= 0 or thoigian <= 0 or somay <= 0:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p gi√° tr·ªã l·ªõn h∆°n 0!")
                else:
                    total_time = slsp * thoigian / somay
                    st.markdown(f"<div class='card'><p>üßæ T·ªïng Th·ªùi Gian X·ª≠ L√Ω: <strong>{total_time/60:.2f} gi·ªù</strong></p></div>", unsafe_allow_html=True)
                    if total_time / 60 <= deadline:
                        st.success("‚úÖ ƒê∆°n h√†ng s·∫Ω ƒë√°p ·ª©ng th·ªùi h·∫°n!")
                    else:
                        st.warning("‚ö†Ô∏è ƒê∆°n h√†ng c√≥ nguy c∆° tr·ªÖ h·∫°n!")
                        st.info(f"üìù ƒê·ªÅ xu·∫•t: TƒÉng s·ªë m√°y l√™n {(slsp * thoigian / (deadline * 60)):.0f} ho·∫∑c ƒëi·ªÅu ch·ªânh ca l√†m vi·ªác.")

elif menu == "üì¶ L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t (ACO + RL)":
    with st.container():
        st.markdown("<div class='card'><h2>üì¶ L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t (ACO + RL)</h2><p>T·∫≠n d·ª•ng AI ƒë·ªÉ t·ªëi ∆∞u h√≥a l·ªãch s·∫£n xu·∫•t.</p></div>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns(3)
        with col1:
            jobs = st.slider("S·ªë S·∫£n Ph·∫©m", 10, 100, 30, help="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·∫ßn l·∫≠p l·ªãch")
        with col2:
            machines = st.slider("S·ªë M√°y CNC", 5, 30, 15, help="S·ªë m√°y CNC c√≥ s·∫µn")
        with col3:
            priority_job = st.text_input("S·∫£n Ph·∫©m ∆Øu Ti√™n (e.g., SP1,SP2)", "", help="C√°c s·∫£n ph·∫©m ∆∞u ti√™n, c√°ch nhau b·∫±ng d·∫•u ph·∫©y")
        st.markdown("#### Nh·∫≠p c√¥ng su·∫•t t·ª´ng m√°y (kW)")
        power_rates = {}
        for i in range(machines):
            power_rates[f"M{i+1}"] = st.number_input(
                f"C√¥ng Su·∫•t M√°y M{i+1} (kW)", min_value=0.1, value=1.0, step=0.1, key=f"power_{i}"
            )
        priorities = {f"SP{i+1}": 1.0 for i in range(jobs)}
        if priority_job:
            for pj in priority_job.split(","):
                if pj in priorities:
                    priorities[pj] = 2.5
        broken_machines = ""             
        broken_machines_list = [m.strip() for m in broken_machines.split(",") if m.strip()] if broken_machines else []
        for m in broken_machines_list:
            if m not in [f"M{i+1}" for i in range(machines)]:
                st.error(f"‚ùå M√°y {m} kh√¥ng h·ª£p l·ªá!")
                st.stop()
        if st.button("üöÄ T·∫°o L·ªãch T·ªëi ∆Øu"):
            if jobs <= machines:
                st.warning("‚ö†Ô∏è S·ªë s·∫£n ph·∫©m n√™n v∆∞·ª£t s·ªë m√°y ƒë·ªÉ t·ªëi ∆∞u l·ªãch!")
            schedule, timeline, energy_cost = run_aco_schedule(jobs, machines, priorities, power_rates=power_rates)
            if schedule:
                rl_model = init_rl_model(machines, jobs)
                if rl_model and st.session_state.df_uploaded is not None and not st.session_state.rl_model_trained:
                    df, _ = preprocess_data(st.session_state.df_uploaded)
                    if df is not None:
                        states = []
                        for i in range(len(df)):
                            state_machines = [df.iloc[i]["T·ªïng d·ª´ng"]] * machines
                            state_jobs = [1] * jobs
                            states.append(state_machines + state_jobs)
                        states = np.array(states)
                        rewards = df["Hi·ªáu su·∫•t (%)"].values / 100
                        rl_model = train_rl_model(rl_model, states, None, rewards)
                        st.session_state.rl_model_trained = True
                if rl_model:
                    state = np.array([timeline[m] for m in [f"M{i+1}" for i in range(machines)]] + [1] * jobs)
                    action_probs = rl_model.predict(state.reshape(1, -1))[0]
                    epsilon = max(0.01, 0.1 * (0.995 ** st.session_state.training_step))
                    for i, (machine, start, end, job) in enumerate(schedule):
                        if np.random.random() < epsilon:
                            new_machine = np.random.choice([f"M{i+1}" for i in range(machines)], p=action_probs)
                            schedule[i] = (new_machine, start, end, job)
                    st.session_state.training_step += 1
                fig, df_gantt = plot_gantt_schedule(schedule)
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                    st.success(f"‚è±Ô∏è T·ªïng Th·ªùi Gian Ho√†n Th√†nh: {max(timeline.values()):,} ph√∫t")
                    st.info(f"‚ö° Chi Ph√≠ NƒÉng L∆∞·ª£ng: ${energy_cost:,.2f}")
                    st.markdown("<div class='card'><h3>‚ö° Ph√¢n T√≠ch Ti√™u Th·ª• NƒÉng L∆∞·ª£ng</h3></div>", unsafe_allow_html=True)
                    energy_data = []
                    for machine, start, end, job in schedule:
                        hours = np.arange(int(start/60), int(end/60) + 1)
                        for h in hours:
                            price = 0.15 if 8 <= h % 24 <= 17 else 0.08
                            energy_data.append({"Gi·ªù": h, "M√°y": machine, "NƒÉng L∆∞·ª£ng (kWh)": power_rates.get(machine, 1.0) * price})
                    df_energy = pd.DataFrame(energy_data)
                    fig_energy = px.line(df_energy, x="Gi·ªù", y="NƒÉng L∆∞·ª£ng (kWh)", color="M√°y", title="Ti√™u Th·ª• NƒÉng L∆∞·ª£ng Theo Gi·ªù", template="plotly_dark")
                    st.plotly_chart(fig_energy, use_container_width=True)
                    if st.session_state.df_uploaded is not None:
                        df, scaler = preprocess_data(st.session_state.df_uploaded)
                        if df is not None and init_lstm_model() is not None:
                            lstm_model = init_lstm_model()
                            features = ["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)", "T·ªïng d·ª´ng"]
                            if all(col in df.columns for col in features) and len(df) >= 5:
                                X = reshape_lstm_input(df)
                                predicted_time = lstm_model.predict(X, verbose=0)[0][0]
                                st.markdown(f"<div class='card'><p>üß† D·ª± ƒêo√°n Th·ªùi Gian X·ª≠ L√Ω (LSTM): <strong>{predicted_time:.1f} ph√∫t</strong></p></div>", unsafe_allow_html=True)
                            else:
                                st.warning("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 5 d√≤ng d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß ƒë·ªÉ d·ª± ƒëo√°n LSTM!")
                    buffer = io.StringIO()
                    df_gantt.to_csv(buffer, index=False)
                    st.download_button(
                        "‚¨áÔ∏è T·∫£i D·ªØ Li·ªáu Gantt (CSV)",
                        data=buffer.getvalue(),
                        file_name=f"gantt_schedule_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )

elif menu == "üìä Ph√¢n T√≠ch Hi·ªáu Su·∫•t & D·ª´ng M√°y":
    with st.container():
        st.markdown("<div class='card'><h2>üìä Ph√¢n T√≠ch Hi·ªáu Su·∫•t & D·ª´ng M√°y</h2><p>Ph√¢n t√≠ch d·ªØ li·ªáu s·∫£n xu·∫•t ƒë·ªÉ n√¢ng cao hi·ªáu qu·∫£.</p></div>", unsafe_allow_html=True)
        data = {
            "Ca": ["S√°ng", "Chi·ªÅu", "T·ªëi"],
            "S·∫£n l∆∞·ª£ng (SP)": [120, 100, 90],
            "D·ª´ng do m√°y (ph√∫t)": [10, 20, 5],
            "D·ª´ng do ng∆∞·ªùi (ph√∫t)": [5, 15, 10],
            "D·ª´ng l√Ω do kh√°c (ph√∫t)": [0, 5, 2]
        }
        df = st.data_editor(
            pd.DataFrame(data),
            num_rows="dynamic",
            column_config={
                "S·∫£n l∆∞·ª£ng (SP)": st.column_config.NumberColumn(min_value=0, help="S·ªë s·∫£n ph·∫©m ho√†n th√†nh"),
                "D·ª´ng do m√°y (ph√∫t)": st.column_config.NumberColumn(min_value=0, help="Th·ªùi gian d·ª´ng do m√°y"),
                "D·ª´ng do ng∆∞·ªùi (ph√∫t)": st.column_config.NumberColumn(min_value=0, help="Th·ªùi gian d·ª´ng do ng∆∞·ªùi"),
                "D·ª´ng l√Ω do kh√°c (ph√∫t)": st.column_config.NumberColumn(min_value=0, help="Th·ªùi gian d·ª´ng do l√Ω do kh√°c")
            }
        )
        if st.button("üìà Ph√¢n T√≠ch Hi·ªáu Su·∫•t"):
            if df.empty:
                st.error("‚ùå Vui l√≤ng nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch!")
            else:
                df, _ = preprocess_data(df)
                if df is not None:
                    df["T·ªïng d·ª´ng"] = df.iloc[:, 2:5].sum(axis=1)
                    df["Hi·ªáu su·∫•t (%)"] = ((df["S·∫£n l∆∞·ª£ng (SP)"] / (480 - df["T·ªïng d·ª´ng"])) * 100).round(1)
                    threshold = st.slider("Ng∆∞·ª°ng C·∫£nh B√°o Hi·ªáu Su·∫•t (%)", 50, 90, 80, help="Ng∆∞·ª°ng ƒë·ªÉ ph√°t hi·ªán hi·ªáu su·∫•t th·∫•p")
                    df["C·∫£nh b√°o"] = np.where(df["Hi·ªáu su·∫•t (%)"] < threshold, "‚ö†Ô∏è C·∫ßn Ki·ªÉm Tra", "‚úÖ T·ªët")
                    st.dataframe(df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                    st.session_state.df_uploaded = df
                    rf_model, iso_forest = init_predictive_models()
                    if iso_forest is not None:
                        anomalies = iso_forest.fit_predict(df[["T·ªïng d·ª´ng"]])
                        if -1 in anomalies:
                            anomaly_ca = df[anomalies == -1]["Ca"].tolist()
                            send_telegram_alert(f"‚ö†Ô∏è Ph√°t hi·ªán b·∫•t th∆∞·ªùng: Th·ªùi gian d·ª´ng cao ·ªü ca {', '.join(anomaly_ca)}!")
                    fig = go.Figure(data=[
                        go.Bar(name='S·∫£n L∆∞·ª£ng (SP)', x=df['Ca'], y=df['S·∫£n l∆∞·ª£ng (SP)'], marker_color="#d32f2f"),
                        go.Bar(name='T·ªïng D·ª´ng (ph√∫t)', x=df['Ca'], y=df['T·ªïng d·ª´ng'], marker_color="#ffffff")
                    ])
                    fig.update_layout(
                        barmode='group',
                        title="S·∫£n L∆∞·ª£ng vs Th·ªùi Gian D·ª´ng Theo Ca",
                        yaxis_title="S·ªë L∆∞·ª£ng/Ph√∫t",
                        template="plotly_dark",
                        showlegend=True
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    heatmap_buffer = generate_heatmap(df)
                    if heatmap_buffer:
                        st.image(heatmap_buffer, caption="T∆∞∆°ng Quan C√°c Y·∫øu T·ªë S·∫£n Xu·∫•t")
                    if df["Hi·ªáu su·∫•t (%)"].lt(threshold).any():
                        low_perf_ca = df[df["Hi·ªáu su·∫•t (%)"] < threshold]["Ca"].tolist()
                        send_telegram_alert(f"‚ö†Ô∏è C·∫£nh b√°o: Hi·ªáu su·∫•t th·∫•p ·ªü ca {', '.join(low_perf_ca)}!")

elif menu == "üìà B√°o C√°o Hi·ªáu Su·∫•t Theo Ca":
    with st.container():
        st.markdown("<div class='card'><h2>üìà B√°o C√°o Hi·ªáu Su·∫•t Theo Ca</h2><p>Theo d√µi v√† so s√°nh hi·ªáu su·∫•t s·∫£n xu·∫•t theo ca.</p></div>", unsafe_allow_html=True)
        df = pd.DataFrame({
            "Ng√†y": ["24/06", "25/06", "26/06"] * 3,
            "Ca": ["S√°ng", "Chi·ªÅu", "T·ªëi"] * 3,
            "Hi·ªáu su·∫•t (%)": [95, 80, 75, 92, 84, 60, 89, 78, 65]
        })
        erp_endpoint = st.text_input("ERP Endpoint", value="https://factory-mes.com/api/shift-performance", help="Nh·∫≠p URL API ERP")
        erp_token = st.text_input("ERP Token", type="password", help="Nh·∫≠p token API ERP")
        if st.button("üîÑ T·∫£i D·ªØ Li·ªáu ERP"):
            df_erp = fetch_erp_data(erp_endpoint, erp_token)
            if df_erp is not None:
                df = df_erp
                st.session_state.df_uploaded = df
                st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu ERP!")
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("T·ª´ Ng√†y", value=datetime.now().date(), help="Ng√†y b·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
        with col2:
            end_date = st.date_input("ƒê·∫øn Ng√†y", value=datetime.now().date(), help="Ng√†y k·∫øt th√∫c ph√¢n t√≠ch")
        fig = px.line(
            df,
            x="Ng√†y",
            y="Hi·ªáu su·∫•t (%)",
            color="Ca",
            markers=True,
            title="Hi·ªáu Su·∫•t Theo Ca Qua C√°c Ng√†y",
            template="plotly_dark"
        )
        fig.update_layout(hovermode="x unified")
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("<div class='card'><h3>Th·ªëng K√™ T√≥m T·∫Øt</h3></div>", unsafe_allow_html=True)
        summary = df.groupby("Ca")["Hi·ªáu su·∫•t (%)"].agg(['mean', 'min', 'max']).round(1)
        st.dataframe(summary.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))

elif menu == "üì• T√≠ch H·ª£p D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c":
    with st.container():
        st.markdown("<div class='card'><h2>üì• T√≠ch H·ª£p D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c</h2><p>K·∫øt n·ªëi v·ªõi file, IoT ho·∫∑c ERP ƒë·ªÉ ph√¢n t√≠ch th·ªùi gian th·ª±c.</p></div>", unsafe_allow_html=True)
        tabs = st.tabs(["üìÇ T·∫£i File", "üåê K·∫øt N·ªëi IoT", "üîÑ M√¥ Ph·ªèng API", "üè≠ T√≠ch H·ª£p ERP"])
        with tabs[0]:
            file = st.file_uploader("T·∫£i File CSV/Excel", type=["csv", "xlsx"], help="File c·∫ßn c√≥: Ca, S·∫£n l∆∞·ª£ng (SP), v.v.")
            if file:
                try:
                    df = pd.read_csv(file) if file.name.endswith("csv") else pd.read_excel(file, parse_dates=["Th·ªùi gian"], date_format="%Y-%m-%d %I:%M:%S %p")
                    if validate_realtime_data(df.iloc[0].to_dict()):
                        df, _ = preprocess_data(df)
                        if df is not None:
                            st.session_state.df_uploaded = df
                            st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
                            st.dataframe(df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))

                            # T·ª± ƒë·ªông l·∫≠p l·ªãch v·ªõi ACO + RL
                            jobs = len(df["S·∫£n ph·∫©m"].unique()) if "S·∫£n ph·∫©m" in df.columns else df["S·∫£n l∆∞·ª£ng (SP)"].sum() // 10  # ∆Ø·ªõc l∆∞·ª£ng s·ªë s·∫£n ph·∫©m
                            machines = st.slider("S·ªë M√°y CNC T·ªëi ƒêa", 1, 30, 15, key="auto_machines", help="S·ªë m√°y CNC ƒë·ªÉ l·∫≠p l·ªãch")
                            priorities = {f"SP{i+1}": 1.0 for i in range(jobs)}
                            power_rates = {f"M{i+1}": np.random.uniform(0.5, 2.0) for i in range(machines)}
                            broken_machines = df[df["D·ª´ng do m√°y (ph√∫t)"] > 60]["M√°y"].tolist() if "M√°y" in df.columns else []

                            if st.button("üöÄ T·∫°o L·ªãch T·ª± ƒê·ªông"):
                                schedule, timeline, energy_cost = run_aco_schedule(
                                    num_jobs=jobs,
                                    num_machines=machines,
                                    priorities=priorities,
                                    power_rates=power_rates,
                                    broken_machines=broken_machines
                                )
                                if schedule:
                                    fig, df_gantt = plot_gantt_schedule(schedule)
                                    if fig:
                                        st.plotly_chart(fig, use_container_width=True)
                                        st.success(f"‚è±Ô∏è T·ªïng Th·ªùi Gian Ho√†n Th√†nh: {max(timeline.values()):,} ph√∫t")
                                        st.info(f"‚ö° Chi Ph√≠ NƒÉng L∆∞·ª£ng: ${energy_cost:,.2f}")
                                        buffer = io.StringIO()
                                        df_gantt.to_csv(buffer, index=False)
                                        st.download_button(
                                            "‚¨áÔ∏è T·∫£i D·ªØ Li·ªáu Gantt (CSV)",
                                            data=buffer.getvalue(),
                                            file_name=f"gantt_schedule_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                            mime="text/csv"
                                        )
                    else:
                        st.error("‚ùå D·ªØ li·ªáu file kh√¥ng h·ª£p l·ªá!")
                except Exception as e:
                    logger.error(f"T·∫£i file th·∫•t b·∫°i: {e}")
                    st.error(f"‚ùå L·ªói ƒë·ªçc file: {e}")
        with tabs[1]:
            if st.button("üîÑ K·∫øt N·ªëi MQTT"):
                asyncio.run(fetch_iot_data())
                if st.session_state.mqtt_data:
                    st.markdown("<div class='card'><h3>üì° D·ªØ Li·ªáu IoT Th·ªùi Gian Th·ª±c</h3></div>", unsafe_allow_html=True)
                    st.json(st.session_state.mqtt_data)
                else:
                    st.info("‚Ñπ Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu MQTT.")
        with tabs[2]:
            if st.button("üîÑ M√¥ Ph·ªèng D·ªØ Li·ªáu API"):
                try:
                    api_data = {
                        "Ca": ["S√°ng", "Chi·ªÅu", "T·ªëi"],
                        "S·∫£n l∆∞·ª£ng (SP)": [110, 95, 85],
                        "D·ª´ng do m√°y (ph√∫t)": [12, 18, 7],
                        "D·ª´ng do ng∆∞·ªùi (ph√∫t)": [6, 10, 8],
                        "D·ª´ng l√Ω do kh√°c (ph√∫t)": [2, 4, 3]
                    }
                    df = pd.DataFrame(api_data)
                    if validate_realtime_data(df.iloc[0].to_dict()):
                        df, _ = preprocess_data(df)
                        if df is not None:
                            st.session_state.df_uploaded = df
                            st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu API m√¥ ph·ªèng!")
                            st.dataframe(df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                    else:
                        st.error("‚ùå D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá!")
                except Exception as e:
                    logger.error(f"M√¥ ph·ªèng API th·∫•t b·∫°i: {e}")
                    st.error(f"‚ùå L·ªói m√¥ ph·ªèng API: {e}")
        with tabs[3]:
            erp_endpoint = st.text_input("ERP Endpoint", value="https://factory-erp.com/api/orders", help="Nh·∫≠p URL API ERP")
            erp_token = st.text_input("ERP Token", type="password", help="Nh·∫≠p token API ERP")
            if st.button("üîÑ T√≠ch H·ª£p ERP"):
                df_erp = fetch_erp_data(erp_endpoint, erp_token)
                if df_erp is not None:
                    st.session_state.df_uploaded = df_erp
                    st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu ERP!")
                    st.dataframe(df_erp.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))

elif menu == "üì§ Xu·∫•t B√°o C√°o ƒêa ƒê·ªãnh D·∫°ng":
    with st.container():
        st.markdown("<div class='card'><h2>üì§ Xu·∫•t B√°o C√°o ƒêa ƒê·ªãnh D·∫°ng</h2><p>Xu·∫•t d·ªØ li·ªáu s·∫£n xu·∫•t ·ªü c√°c ƒë·ªãnh d·∫°ng kh√°c nhau.</p></div>", unsafe_allow_html=True)
        df = st.session_state.df_uploaded
        if df is not None:
            format = st.selectbox("ƒê·ªãnh D·∫°ng Xu·∫•t", ["Excel", "JSON", "XML", "PDF"], help="Ch·ªçn ƒë·ªãnh d·∫°ng cho ERP/MES")
            erp_endpoint = st.text_input("ERP Upload Endpoint", value="https://factory-erp.com/api/upload-report", help="Nh·∫≠p URL API ERP ƒë·ªÉ t·∫£i l√™n b√°o c√°o")
            erp_token = st.text_input("ERP Token", type="password", help="Nh·∫≠p token API ERP")
            data, filename, mime = export_to_erp(df, format.lower())
            if data:
                st.download_button(
                    f"‚¨áÔ∏è T·∫£i B√°o C√°o {format}",
                    data=data,
                    file_name=filename,
                    mime=mime
                )
                if st.button("üì§ T·∫£i L√™n ERP"):
                    try:
                        headers = {"Authorization": f"Bearer {erp_token}"}
                        requests.post(erp_endpoint, json={"data": data, "filename": filename}, headers=headers)
                        st.success("‚úÖ ƒê√£ t·∫£i b√°o c√°o l√™n ERP!")
                    except Exception as e:
                        st.error(f"‚ùå L·ªói t·∫£i l√™n ERP: {e}")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng t√≠ch h·ª£p d·ªØ li·ªáu tr∆∞·ªõc khi xu·∫•t b√°o c√°o!")

elif menu == "üìå Bi·ªÉu ƒê·ªì Chu·ªói Nguy√™n C√¥ng":
    with st.container():
        st.markdown("<div class='card'><h2>üìå Bi·ªÉu ƒê·ªì Chu·ªói Nguy√™n C√¥ng</h2><p>Hi·ªÉn th·ªã th·ªùi gian c√°c quy tr√¨nh s·∫£n xu·∫•t.</p></div>", unsafe_allow_html=True)
        file = st.file_uploader("T·∫£i D·ªØ Li·ªáu Nguy√™n C√¥ng (CSV/Excel)", type=["csv", "xlsx"], key="nguyencong", help="File c·∫ßn c√≥: S·∫£n ph·∫©m, Nguy√™n c√¥ng, Th·ªùi gian (ph√∫t)")
        if file:
            try:
                df = pd.read_csv(file) if file.name.endswith("csv") else pd.read_excel(file)
                required_columns = ["S·∫£n ph·∫©m", "Nguy√™n c√¥ng", "Th·ªùi gian (ph√∫t)"]
                if not all(col in df.columns for col in required_columns):
                    st.error("‚ùå File c·∫ßn ch·ª©a c√°c c·ªôt: " + ", ".join(required_columns))
                else:
                    df, _ = preprocess_data(df.copy())
                    if df is not None:
                        st.dataframe(df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                        fig = px.bar(
                            df,
                            x="Nguy√™n c√¥ng",
                            y="Th·ªùi gian (ph√∫t)",
                            color="S·∫£n ph·∫©m",
                            title="Th·ªùi Gian Nguy√™n C√¥ng Theo S·∫£n Ph·∫©m",
                            barmode="group",
                            text="Th·ªùi gian (ph√∫t)",
                            template="plotly_dark"
                        )
                        fig.update_traces(textposition='auto')
                        st.plotly_chart(fig, use_container_width=True)
                        st.markdown("<div class='card'><h3>Th·ªëng K√™ Nguy√™n C√¥ng</h3></div>", unsafe_allow_html=True)
                        summary = df.groupby("S·∫£n ph·∫©m")["Th·ªùi gian (ph√∫t)"].agg(['sum', 'mean', 'count']).round(1)
                        st.dataframe(summary.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
            except Exception as e:
                logger.error(f"L·ªói bi·ªÉu ƒë·ªì nguy√™n c√¥ng: {e}")
                st.error(f"‚ùå L·ªói d·ªØ li·ªáu nguy√™n c√¥ng: {e}")

elif menu == "üì© C·∫£nh B√°o Th√¥ng Minh Telegram":
    with st.container():
        st.markdown("<div class='card'><h2>üì© C·∫£nh B√°o Th√¥ng Minh Telegram</h2><p>G·ª≠i c·∫£nh b√°o th·ªùi gian th·ª±c ƒë·ªÉ x·ª≠ l√Ω v·∫•n ƒë·ªÅ nhanh ch√≥ng.</p></div>", unsafe_allow_html=True)
        with st.form("telegram_form"):
            msg = st.text_input("N·ªôi Dung C·∫£nh B√°o:", max_chars=250, help="T·ªëi ƒëa 250 k√Ω t·ª±")
            submitted = st.form_submit_button("üö® G·ª≠i C·∫£nh B√°o")
            if submitted:
                if not msg:
                    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung c·∫£nh b√°o!")
                elif len(msg) > 250:
                    st.error("‚ùå N·ªôi dung v∆∞·ª£t qu√° 250 k√Ω t·ª±!")
                else:
                    send_telegram_alert(msg)
        with st.form("custom_alert_form"):
            st.markdown("### C·∫•u H√¨nh Ng∆∞·ª°ng C·∫£nh B√°o")
            threshold_type = st.selectbox("Lo·∫°i Ng∆∞·ª°ng", ["Hi·ªáu su·∫•t (%)", "T·ªïng d·ª´ng (ph√∫t)", "Chi ph√≠ nƒÉng l∆∞·ª£ng ($)"])
            threshold_value = st.number_input("Gi√° Tr·ªã Ng∆∞·ª°ng", min_value=0.0, value=80.0)
            if st.form_submit_button("L∆∞u Ng∆∞·ª°ng"):
                save_alert_to_db(f"Ng∆∞·ª°ng t√πy ch·ªânh: {threshold_type} < {threshold_value}", "C·∫•u h√¨nh")
                st.success("‚úÖ ƒê√£ l∆∞u ng∆∞·ª°ng c·∫£nh b√°o!")
        st.markdown("<div class='card'><h3>üìú L·ªãch S·ª≠ C·∫£nh B√°o</h3></div>", unsafe_allow_html=True)
        alert_df = load_alert_history(st.session_state.factory_id)
        if not alert_df.empty:
            st.dataframe(alert_df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
        else:
            st.info("‚Ñπ Ch∆∞a c√≥ l·ªãch s·ª≠ c·∫£nh b√°o.")
        if st.session_state.df_uploaded is not None:
            df, _ = preprocess_data(st.session_state.df_uploaded)
            if df is not None:
                rf_model, iso_forest = init_predictive_models()
                if iso_forest:
                    anomalies = iso_forest.fit_predict(df[["S·∫£n l∆∞·ª£ng (SP)", "T·ªïng d·ª´ng"]])
                    if -1 in anomalies:
                        anomaly_ca = df[anomalies == -1]["Ca"].tolist()
                        send_telegram_alert(f"‚ö†Ô∏è B·∫•t th∆∞·ªùng: D·ªØ li·ªáu b·∫•t th∆∞·ªùng ·ªü ca {', '.join(anomaly_ca)}")

elif menu == "üìã Ph√¢n T√≠ch Hi·ªáu Su·∫•t S√¢u":
    with st.container():
        st.markdown("<div class='card'><h2>üìã Ph√¢n T√≠ch Hi·ªáu Su·∫•t S√¢u</h2><p>Kh√°m ph√° nguy√™n nh√¢n g·ªëc r·ªÖ v√† t·ªëi ∆∞u h√≥a s·∫£n xu·∫•t.</p></div>", unsafe_allow_html=True)
        if st.session_state.df_uploaded is not None:
            df, _ = preprocess_data(st.session_state.df_uploaded)
            if df is not None:
                df["T·ªïng d·ª´ng"] = df.iloc[:, 2:5].sum(axis=1)
                df["Hi·ªáu su·∫•t (%)"] = ((df["S·∫£n l∆∞·ª£ng (SP)"] / (480 - df["T·ªïng d·ª´ng"])) * 100).round(2)
                downtime_cols = ["D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]
                downtime_sums = df[downtime_cols].sum()
                downtime_df = pd.DataFrame({
                    "Nguy√™n Nh√¢n": downtime_cols,
                    "Th·ªùi Gian (ph√∫t)": downtime_sums.values
                }).sort_values("Th·ªùi Gian (ph√∫t)", ascending=False)
                downtime_df["T·ª∑ L·ªá T√≠ch L≈©y (%)"] = downtime_df["Th·ªùi Gian (ph√∫t)"].cumsum() / downtime_df["Th·ªùi Gian (ph√∫t)"].sum() * 100
                st.markdown("<div class='card'><h3>Ph√¢n T√≠ch Pareto Th·ªùi Gian D·ª´ng</h3></div>", unsafe_allow_html=True)
                fig_pareto = go.Figure()
                fig_pareto.add_trace(
                    go.Bar(
                        x=downtime_df["Nguy√™n Nh√¢n"],
                        y=downtime_df["Th·ªùi Gian (ph√∫t)"],
                        name="Th·ªùi Gian D·ª´ng",
                        marker_color="#d32f2f"
                    )
                )
                fig_pareto.add_trace(
                    go.Scatter(
                        x=downtime_df["Nguy√™n Nh√¢n"],
                        y=downtime_df["T·ª∑ L·ªá T√≠ch L≈©y (%)"],
                        name="T·ª∑ L·ªá T√≠ch L≈©y",
                        yaxis="y2",
                        mode="lines+markers",
                        line=dict(color="#ffffff")
                    )
                )
                fig_pareto.update_layout(
                    title="Ph√¢n T√≠ch Pareto Th·ªùi Gian D·ª´ng",
                    yaxis=dict(title="Th·ªùi Gian (ph√∫t)"),
                    yaxis2=dict(title="T·ª∑ L·ªá T√≠ch L≈©y (%)", overlaying="y", side="right"),
                    template="plotly_dark",
                    showlegend=True
                )
                st.plotly_chart(fig_pareto, use_container_width=True)
                st.dataframe(downtime_df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                st.markdown("<div class='card'><h3>T·∫ßm Quan Tr·ªçng Y·∫øu T·ªë</h3></div>", unsafe_allow_html=True)
                rf_model, _ = init_predictive_models()
                if rf_model is not None:
                    X = df[["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do m√°y (ph√∫t)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]]
                    y = df["Hi·ªáu su·∫•t (%)"]
                    rf_model.fit(X, y)
                    feature_importance = pd.DataFrame({
                        "Y·∫øu T·ªë": X.columns,
                        "T·∫ßm Quan Tr·ªçng (%)": rf_model.feature_importances_ * 100
                    }).sort_values("T·∫ßm Quan Tr·ªçng (%)", ascending=False)
                    st.dataframe(feature_importance.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                    st.markdown(f"<div class='card'><p>üîç Y·∫øu T·ªë Ch√≠nh: <strong>{feature_importance.iloc[0]['Y·∫øu T·ªë']}</strong></p></div>", unsafe_allow_html=True)
                st.markdown("<div class='card'><h3>ƒê·ªÅ Xu·∫•t C·∫£i Ti·∫øn</h3></div>", unsafe_allow_html=True)
                main_cause = downtime_df.iloc[0]["Nguy√™n Nh√¢n"]
                st.markdown(f"""
                **V·∫•n ƒê·ªÅ Ch√≠nh**: {main_cause}
                - **D·ª´ng Do M√°y**: TƒÉng c∆∞·ªùng b·∫£o tr√¨ ƒë·ªãnh k·ª≥ v√† ki·ªÉm tra.
                - **D·ª´ng Do Ng∆∞·ªùi**: Cung c·∫•p ƒë√†o t·∫°o v·ªÅ quy tr√¨nh v√† an to√†n.
                - **D·ª´ng L√Ω Do Kh√°c**: T·ªëi ∆∞u h√≥a lu·ªìng c√¥ng vi·ªác v√† chu·ªói cung ·ª©ng.
                """)
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng t√≠ch h·ª£p d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch!")

elif menu == "üîß D·ª± ƒêo√°n B·∫£o Tr√¨ N√¢ng Cao":
    with st.container():
        st.markdown("<div class='card'><h2>üîß D·ª± ƒêo√°n B·∫£o Tr√¨ N√¢ng Cao</h2><p>D·ª± ƒëo√°n th·ªùi gian d·ª´ng ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch b·∫£o tr√¨ hi·ªáu qu·∫£.</p></div>", unsafe_allow_html=True)
        if st.session_state.df_uploaded is not None:
            df, scaler = preprocess_data(st.session_state.df_uploaded)
            if df is not None:
                rf_model, _ = init_predictive_models()
                if rf_model is not None:
                    X = df[["S·∫£n l∆∞·ª£ng (SP)", "D·ª´ng do ng∆∞·ªùi (ph√∫t)", "D·ª´ng l√Ω do kh√°c (ph√∫t)"]]
                    y = df["D·ª´ng do m√°y (ph√∫t)"]
                    rf_model.fit(X, y)
                    st.markdown("<div class='card'><h3>üîç D·ª± ƒêo√°n Th·ªùi Gian D·ª´ng M√°y</h3></div>", unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        sp_input = st.number_input("S·∫£n L∆∞·ª£ng D·ª± Ki·∫øn (SP)", min_value=0, value=100, help="S·ªë s·∫£n ph·∫©m d·ª± ki·∫øn")
                    with col2:
                        human_downtime = st.number_input("Th·ªùi Gian D·ª´ng Do Ng∆∞·ªùi (ph√∫t)", min_value=0, value=10, help="Th·ªùi gian d·ª´ng do ng∆∞·ªùi d·ª± ki·∫øn")
                    with col3:
                        other_downtime = st.number_input("Th·ªùi Gian D·ª´ng L√Ω Do Kh√°c (ph√∫t)", min_value=0, value=5, help="Th·ªùi gian d·ª´ng do l√Ω do kh√°c d·ª± ki·∫øn")
                    input_data = scaler.transform([[sp_input, human_downtime, other_downtime]])
                    predicted_downtime = rf_model.predict(input_data)[0]
                    st.markdown(f"<div class='card'><p>üîß Th·ªùi Gian D·ª´ng M√°y D·ª± ƒêo√°n: <strong>{predicted_downtime:.1f} ph√∫t</strong></p></div>", unsafe_allow_html=True)
                    if predicted_downtime > 30:
                        send_telegram_alert(f"‚ö†Ô∏è C·∫£nh b√°o: D·ª± ƒëo√°n th·ªùi gian d·ª´ng m√°y cao ({predicted_downtime:.1f} ph√∫t) cho s·∫£n l∆∞·ª£ng {sp_input} SP!")
                    fig = px.scatter(df, x="S·∫£n l∆∞·ª£ng (SP)", y="D·ª´ng do m√°y (ph√∫t)", trendline="ols",
                                     title="M·ªëi Quan H·ªá Gi·ªØa S·∫£n L∆∞·ª£ng v√† Th·ªùi Gian D·ª´ng M√°y", template="plotly_dark")
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng t√≠ch h·ª£p d·ªØ li·ªáu tr∆∞·ªõc khi d·ª± ƒëo√°n!")

elif menu == "‚è±Ô∏è M√¥ Ph·ªèng Th·ªùi Gian Th·ª±c":
    with st.container():
        st.markdown("<div class='card'><h2>‚è±Ô∏è M√¥ Ph·ªèng Th·ªùi Gian Th·ª±c</h2><p>Gi√°m s√°t v√† t·ªëi ∆∞u h√≥a s·∫£n xu·∫•t theo th·ªùi gian th·ª±c.</p></div>", unsafe_allow_html=True)
        st.markdown("### C·∫•u H√¨nh M√¥ Ph·ªèng")
        col1, col2 = st.columns(2)
        with col1:
            jobs = st.slider("S·ªë S·∫£n Ph·∫©m", 10, 100, 30, key="sim_jobs", help="S·ªë s·∫£n ph·∫©m ƒë·ªÉ m√¥ ph·ªèng")
        with col2:
            machines = st.slider("S·ªë M√°y CNC", 5, 30, 15, key="sim_machines", help="S·ªë m√°y CNC trong m√¥ ph·ªèng")
        priorities = {f"SP{i+1}": 1.0 for i in range(jobs)}
        power_rates = {f"M{i+1}": np.random.uniform(0.5, 2.0) for i in range(machines)}

        # Initialize session state with a default list
        if 'realtime_data' not in st.session_state:
            st.session_state.realtime_data = []
        if 'is_simulating' not in st.session_state:
            st.session_state.is_simulating = False
        if 'simulation_event' not in st.session_state:
            st.session_state.simulation_event = threading.Event()
        if 'sim_thread' not in st.session_state:
            st.session_state.sim_thread = None

        def simulate_realtime_data(event, data_list):
            """Run simulation in a separate thread with a passed list."""
            logger.info("Simulation thread started")
            try:
                while not event.is_set():
                    new_data = {
                        "Ca": np.random.choice(["S√°ng", "Chi·ªÅu", "T·ªëi"]),
                        "S·∫£n l∆∞·ª£ng (SP)": np.random.randint(80, 150),
                        "D·ª´ng do m√°y (ph√∫t)": np.random.randint(0, 20),
                        "D·ª´ng do ng∆∞·ªùi (ph√∫t)": np.random.randint(0, 15),
                        "D·ª´ng l√Ω do kh√°c (ph√∫t)": np.random.randint(0, 10),
                        "Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }
                    logger.debug(f"Generated data: {new_data}")
                    data_list.append(new_data)
                    logger.debug(f"Appended data, current length: {len(data_list)}")
                    if len(data_list) > 100:
                        data_list.pop(0)
                    time.sleep(3)  # Simulate data every 3 seconds
            except Exception as e:
                logger.error(f"Simulation error: {e}")
            finally:
                logger.info("Simulation thread ended")

        def start_simulation():
            if not st.session_state.is_simulating:
                st.session_state.realtime_data = []  # Reset data
                st.session_state.is_simulating = True
                st.session_state.simulation_event.clear()
                st.success("‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu m√¥ ph·ªèng th·ªùi gian th·ª±c!")
                if st.session_state.sim_thread is None or not st.session_state.sim_thread.is_alive():
                    st.session_state.sim_thread = threading.Thread(
                        target=simulate_realtime_data,
                        args=(st.session_state.simulation_event, st.session_state.realtime_data),
                        daemon=True
                    )
                    st.session_state.sim_thread.start()
                    logger.info("Simulation thread launched")
                else:
                    logger.warning("Thread already running")
            else:
                st.info("‚è≥ M√¥ ph·ªèng ƒëang ch·∫°y...")

        def stop_simulation():
            if st.session_state.is_simulating:
                st.session_state.is_simulating = False
                st.session_state.simulation_event.set()
                if st.session_state.sim_thread:
                    st.session_state.sim_thread.join(timeout=2)
                    st.session_state.sim_thread = None
                st.success("‚úÖ ƒê√£ d·ª´ng m√¥ ph·ªèng th√†nh c√¥ng!")
                logger.info("Simulation stopped")
            else:
                st.info("‚Ñπ M√¥ ph·ªèng ƒë√£ d·ª´ng ho·∫∑c ch∆∞a b·∫Øt ƒë·∫ßu.")

        st.button("‚ñ∂Ô∏è B·∫Øt ƒê·∫ßu M√¥ Ph·ªèng", on_click=start_simulation)
        st.button("‚èπÔ∏è D·ª´ng M√¥ Ph·ªèng", on_click=stop_simulation)

        # Update real-time data display
        data_placeholder = st.empty()
        chart_placeholder = st.empty()

        if st.session_state.realtime_data:
            df_realtime = pd.DataFrame(st.session_state.realtime_data)
            df_realtime, _ = preprocess_data(df_realtime)
            if df_realtime is not None and not df_realtime.empty:
                with data_placeholder.container():
                    st.markdown("<div class='card'><h3>üìä D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c</h3></div>", unsafe_allow_html=True)
                    st.dataframe(df_realtime.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
                with chart_placeholder.container():
                    try:
                        fig = px.line(
                            df_realtime,
                            x="Th·ªùi gian",
                            y=["S·∫£n l∆∞·ª£ng (SP)", "T·ªïng d·ª´ng"],
                            title="S·∫£n L∆∞·ª£ng v√† Th·ªùi Gian D·ª´ng Theo Th·ªùi Gian",
                            template="plotly_dark",
                            labels={"value": "Gi√° tr·ªã", "variable": "Lo·∫°i d·ªØ li·ªáu"}
                        )
                        fig.update_layout(
                            xaxis_title="Th·ªùi gian",
                            yaxis_title="Gi√° tr·ªã",
                            hovermode="x unified"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        logger.error(f"Chart error: {e}")
                        st.error(f"‚ùå L·ªói v·∫Ω bi·ªÉu ƒë·ªì: {e}")
            else:
                with data_placeholder.container():
                    st.markdown("<div class='card'><h3>üìä D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c</h3></div>", unsafe_allow_html=True)
                    st.warning("‚ö†Ô∏è D·ªØ li·ªáu th·ªùi gian th·ª±c kh√¥ng h·ª£p l·ªá!")
        else:
            with data_placeholder.container():
                st.markdown("<div class='card'><h3>üìä D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c</h3></div>", unsafe_allow_html=True)
                st.info("‚Ñπ ƒêang ch·ªù d·ªØ li·ªáu th·ªùi gian th·ª±c...")

        # Manual refresh button
        if st.session_state.is_simulating and st.button("L√†m m·ªõi d·ªØ li·ªáu"):
            st.experimental_rerun()

elif menu == "üñºÔ∏è Digital Twin (3D)":
    with st.container():
        st.markdown("<div class='card'><h2>üñºÔ∏è Digital Twin (3D)</h2><p>Hi·ªÉn th·ªã chuy·ªÉn ƒë·ªông c√¥ng c·ª• CNC trong kh√¥ng gian 3D.</p></div>", unsafe_allow_html=True)
        file = st.file_uploader("T·∫£i File G-Code ho·∫∑c NC", type=["nc", "gcode"], help="File ch·ª©a ƒë∆∞·ªùng d·∫´n c√¥ng c·ª• (G01)")
        if file:
            try:
                toolpath = parse_gcode(file)
                if not all(toolpath.values()):
                    st.error("‚ùå File G-Code kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ch·ª©a t·ªça ƒë·ªô X, Y, Z!")
                else:
                    fig = go.Figure(data=[
                        go.Scatter3d(
                            x=toolpath["x"],
                            y=toolpath["y"],
                            z=toolpath["z"],
                            mode="lines+markers",
                            marker=dict(size=4, color="#d32f2f"),
                            line=dict(color="#ffffff", width=2)
                        )
                    ])
                    fig.update_layout(
                        title="üõ†Ô∏è Digital Twin: ƒê∆∞·ªùng D·∫´n C√¥ng C·ª• CNC",
                        scene=dict(
                            xaxis_title="X (mm)",
                            yaxis_title="Y (mm)",
                            zaxis_title="Z (mm)"
                        ),
                        template="plotly_dark",
                        showlegend=False
                    )
                    st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω G-Code: {e}")
                st.error(f"‚ùå L·ªói x·ª≠ l√Ω G-Code: {e}")
        else:
            st.markdown("<div class='card'><h3>üñºÔ∏è M√¥ Ph·ªèng M·∫´u</h3></div>", unsafe_allow_html=True)
            t = np.linspace(0, 10, 100)
            x = np.sin(t) * 100
            y = np.cos(t) * 100
            z = t * 10
            fig = go.Figure(data=[
                go.Scatter3d(
                    x=x,
                    y=y,
                    z=z,
                    mode="lines+markers",
                    marker=dict(size=4, color="#d32f2f"),
                    line=dict(color="#ffffff", width=2)
                )
            ])
            fig.update_layout(
                title="üõ†Ô∏è Digital Twin: M√¥ Ph·ªèng ƒê∆∞·ªùng D·∫´n C√¥ng C·ª•",
                scene=dict(
                    xaxis_title="X (mm)",
                    yaxis_title="Y (mm)",
                    zaxis_title="Z (mm)"
                ),
                template="plotly_dark",
                showlegend=False
            )
            st.plotly_chart(fig, use_container_width=True)
        if st.session_state.realtime_data:
            st.markdown("<div class='card'><h3>üì° T√≠ch H·ª£p D·ªØ Li·ªáu Th·ªùi Gian Th·ª±c</h3></div>", unsafe_allow_html=True)
            df_realtime = pd.DataFrame(st.session_state.realtime_data)
            if not df_realtime.empty:
                scale_factor = df_realtime["S·∫£n l∆∞·ª£ng (SP)"].mean() / 100
                fig.update_traces(
                    marker=dict(size=4 * scale_factor),
                    line=dict(width=2 * scale_factor)
                )
                st.plotly_chart(fig, use_container_width=True)

elif menu == "üî¨ Ph√¢n T√≠ch K·ªãch B·∫£n N√¢ng Cao":
    with st.container():
        st.markdown("<div class='card'><h2>üî¨ Ph√¢n T√≠ch K·ªãch B·∫£n N√¢ng Cao</h2><p>So s√°nh c√°c k·ªãch b·∫£n s·∫£n xu·∫•t ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh t·ªëi ∆∞u.</p></div>", unsafe_allow_html=True)
        with st.form("scenario_form"):
            scenario_name = st.text_input("T√™n K·ªãch B·∫£n", help="ƒê·∫∑t t√™n cho k·ªãch b·∫£n c·ªßa b·∫°n")
            col1, col2, col3 = st.columns(3)
            with col1:
                jobs = st.slider("S·ªë S·∫£n Ph·∫©m", 10, 100, 30, key="scenario_jobs", help="S·ªë s·∫£n ph·∫©m")
            with col2:
                machines = st.slider("S·ªë M√°y CNC", 5, 30, 15, key="scenario_machines", help="S·ªë m√°y CNC")
            with col3:
                priority_job = st.text_input("S·∫£n Ph·∫©m ∆Øu Ti√™n", "", key="scenario_priority", help="e.g., SP1,SP2")
            broken_machines = st.text_input("M√°y H·ªèng (e.g., M1,M3)", "", help="C√°c m√°y h·ªèng, c√°ch nhau b·∫±ng d·∫•u ph·∫©y")
            power_rates = {f"M{i+1}": st.number_input(
                f"C√¥ng Su·∫•t M{i+1} (kW)", min_value=0.1, value=1.0, step=0.1, key=f"scenario_power_{i}"
            ) for i in range(machines)}
            submitted = st.form_submit_button("üîç Ph√¢n T√≠ch K·ªãch B·∫£n")
            if submitted:
                if not scenario_name:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p t√™n k·ªãch b·∫£n!")
                else:
                    priorities = {f"SP{i+1}": 1.0 for i in range(jobs)}
                    if priority_job:
                        for pj in priority_job.split(","):
                            if pj in priorities:
                                priorities[pj] = 2.5
                    # S·ª¨A ·ªû ƒê√ÇY: chuy·ªÉn chu·ªói th√†nh list
                    broken_machines_list = [m.strip() for m in broken_machines.split(",") if m.strip()] if broken_machines else []
                    schedule, timeline, energy_cost = run_aco_schedule(
                        jobs, machines, priorities, power_rates=power_rates, broken_machines=broken_machines_list
                    )
                    schedule, timeline, energy_cost = run_aco_schedule(jobs, machines, priorities, power_rates=power_rates, broken_machines=broken_machines_list)
                    if schedule:
                        results = {
                            "total_time": max(timeline.values()),
                            "energy_cost": energy_cost,
                            "schedule": schedule
                        }
                        saved = save_scenario_to_db(scenario_name, {"jobs": jobs, "machines": machines, "priorities": priorities}, results)
                        if saved:
                            st.session_state.scenario_history.append(saved)
                            st.success(f"‚úÖ K·ªãch b·∫£n '{scenario_name}' ƒë√£ ƒë∆∞·ª£c l∆∞u!")
                            fig, df_gantt = plot_gantt_schedule(schedule)
                            if fig:
                                st.plotly_chart(fig, use_container_width=True)
                                st.info(f"‚è±Ô∏è T·ªïng Th·ªùi Gian: {results['total_time']:,} ph√∫t | ‚ö° Chi Ph√≠ NƒÉng L∆∞·ª£ng: ${energy_cost:,.2f}")
        st.markdown("<div class='card'><h3>üìú L·ªãch S·ª≠ K·ªãch B·∫£n</h3></div>", unsafe_allow_html=True)
        scenario_df = load_scenario_history(st.session_state.factory_id)
        if not scenario_df.empty:
            st.dataframe(scenario_df.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
            selected_scenario = st.selectbox("Ch·ªçn K·ªãch B·∫£n ƒë·ªÉ So S√°nh", scenario_df["scenario_name"])
            if selected_scenario:
                scenario_data = scenario_df[scenario_df["scenario_name"] == selected_scenario].iloc[0]
                results = json.loads(scenario_data["results"])
                fig, df_gantt = plot_gantt_schedule(results["schedule"])
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                    st.info(f"‚è±Ô∏è T·ªïng Th·ªùi Gian: {results['total_time']:,} ph√∫t | ‚ö° Chi Ph√≠ NƒÉng L∆∞·ª£ng: ${results['energy_cost']:,.2f}")

elif menu == "üìà So S√°nh Hi·ªáu Su·∫•t AI":
    with st.container():
        st.markdown("<div class='card'><h2>üìà So S√°nh Hi·ªáu Su·∫•t AI</h2><p>ƒê√°nh gi√° hi·ªáu qu·∫£ c·ªßa AI so v·ªõi ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng.</p></div>", unsafe_allow_html=True)
        erp_endpoint = st.text_input("ERP Endpoint", value="https://factory-mes.com/api/historical-performance", help="Nh·∫≠p URL API ERP")
        erp_token = st.text_input("ERP Token", type="password", help="Nh·∫≠p token API ERP")
        if st.button("üîÑ T·∫£i D·ªØ Li·ªáu ERP"):
            df_erp = fetch_erp_data(erp_endpoint, erp_token)
            if df_erp is not None:
                st.session_state.df_uploaded = df_erp
                st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu ERP!")
        comparison_data = {
            "Ph∆∞∆°ng Ph√°p": ["Truy·ªÅn Th·ªëng", "ACO", "ACO + RL"],
            "Th·ªùi Gian Ho√†n Th√†nh (ph√∫t)": [1200, 900, 850],
            "Chi Ph√≠ NƒÉng L∆∞·ª£ng ($)": [1500, 1200, 1100],
            "Hi·ªáu Su·∫•t (%)": [75, 85, 90]
        }
        df_comparison = pd.DataFrame(comparison_data)
        if st.session_state.df_uploaded is not None:
            df, _ = preprocess_data(st.session_state.df_uploaded)
            if df is not None:
                df_comparison["Hi·ªáu Su·∫•t (%)"] = [df["Hi·ªáu su·∫•t (%)"].mean() - 15, df["Hi·ªáu su·∫•t (%)"].mean() - 5, df["Hi·ªáu su·∫•t (%)"].mean()]
        fig = go.Figure(data=[
            go.Bar(
                name="Th·ªùi Gian Ho√†n Th√†nh (ph√∫t)",
                x=df_comparison["Ph∆∞∆°ng Ph√°p"],
                y=df_comparison["Th·ªùi Gian Ho√†n Th√†nh (ph√∫t)"],
                marker_color="#d32f2f"
            ),
            go.Bar(
                name="Chi Ph√≠ NƒÉng L∆∞·ª£ng ($)",
                x=df_comparison["Ph∆∞∆°ng Ph√°p"],
                y=df_comparison["Chi Ph√≠ NƒÉng L∆∞·ª£ng ($)"],
                marker_color="#ffffff"
            )
        ])
        fig.update_layout(
            barmode="group",
            title="So S√°nh Hi·ªáu Su·∫•t: Truy·ªÅn Th·ªëng vs AI",
            template="plotly_dark",
            showlegend=True
        )
        st.plotly_chart(fig, use_container_width=True)
        fig_eff = px.line(
            df_comparison,
            x="Ph∆∞∆°ng Ph√°p",
            y="Hi·ªáu Su·∫•t (%)",
            markers=True,
            title="Hi·ªáu Su·∫•t Theo Ph∆∞∆°ng Ph√°p",
            template="plotly_dark"
        )
        st.plotly_chart(fig_eff, use_container_width=True)
        st.markdown("<div class='card'><h3>üìä K·∫øt Qu·∫£ ƒê·ªãnh L∆∞·ª£ng</h3></div>", unsafe_allow_html=True)
        st.dataframe(df_comparison.style.set_properties(**{'background-color': '#1e1e1e', 'color': '#ffffff'}))
        st.markdown("""
        **K·∫øt Lu·∫≠n**:
        - **ACO + RL**: Gi·∫£m 29% th·ªùi gian v√† 27% chi ph√≠ nƒÉng l∆∞·ª£ng so v·ªõi ph∆∞∆°ng ph√°p truy·ªÅn th·ªëng.
        - **Khuy·∫øn Ngh·ªã**: Tri·ªÉn khai ACO + RL ƒë·ªÉ t·ªëi ∆∞u h√≥a s·∫£n xu·∫•t.
        """)

elif menu == "üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng":
    with st.container():
        st.markdown("<div class='card'><h2>üìñ H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng</h2><p>H∆∞·ªõng d·∫´n chi ti·∫øt ƒë·ªÉ s·ª≠ d·ª•ng CNCTech AI Pro.</p></div>", unsafe_allow_html=True)
        st.markdown("""
        ### üéØ Gi·ªõi Thi·ªáu
        CNCTech AI Pro l√† gi·∫£i ph√°p t·ªëi ∆∞u h√≥a s·∫£n xu·∫•t CNC, t√≠ch h·ª£p AI (ACO, RL, LSTM), IoT, v√† Digital Twin. ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi DIM Team t·∫°i IMS Lab.

        ### üöÄ H∆∞·ªõng D·∫´n Nhanh
        1. **T√≠ch H·ª£p D·ªØ Li·ªáu**:
           - T·∫£i file CSV/Excel trong tab "T√≠ch H·ª£p D·ªØ Li·ªáu".
           - K·∫øt n·ªëi MQTT ho·∫∑c ERP ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu th·ªùi gian th·ª±c.
        2. **L·∫≠p K·∫ø Ho·∫°ch S·∫£n Xu·∫•t**:
           - S·ª≠ d·ª•ng "L·∫≠p K·∫ø Ho·∫°ch Th·ªß C√¥ng" ƒë·ªÉ nh·∫≠p th√¥ng s·ªë c∆° b·∫£n.
           - Ch·ªçn "ACO + RL" ƒë·ªÉ t·ªëi ∆∞u h√≥a l·ªãch s·∫£n xu·∫•t b·∫±ng AI.
        3. **Ph√¢n T√≠ch Hi·ªáu Su·∫•t**:
           - Xem dashboard ƒë·ªÉ theo d√µi s·∫£n l∆∞·ª£ng, th·ªùi gian d·ª´ng, v√† OEE.
           - S·ª≠ d·ª•ng "Ph√¢n T√≠ch Hi·ªáu Su·∫•t S√¢u" ƒë·ªÉ t√¨m nguy√™n nh√¢n g·ªëc r·ªÖ.
        4. **C·∫£nh B√°o v√† B·∫£o Tr√¨**:
           - C·∫•u h√¨nh ng∆∞·ª°ng c·∫£nh b√°o trong "C·∫£nh B√°o Th√¥ng Minh Telegram".
           - D·ª± ƒëo√°n b·∫£o tr√¨ trong "D·ª± ƒêo√°n B·∫£o Tr√¨ N√¢ng Cao".
        5. **Digital Twin v√† K·ªãch B·∫£n**:
           - T·∫£i file G-Code ƒë·ªÉ xem m√¥ ph·ªèng 3D trong "Digital Twin".
           - So s√°nh k·ªãch b·∫£n s·∫£n xu·∫•t trong "Ph√¢n T√≠ch K·ªãch B·∫£n N√¢ng Cao".

        ### üìπ Video H∆∞·ªõng D·∫´n
        <iframe width="100%" height="400" src="https://www.youtube.com/watch?v=4CCGI83vOVo" frameborder="0" allowfullscreen></iframe>

        ### üë• ƒê·ªôi Ng≈© Ph√°t Tri·ªÉn
        - **DIM Team**: V≈© Th·∫ø Anh, Nguy·ªÖn Duy V≈© D∆∞∆°ng, Nguy·ªÖn Th√†nh Vinh, Ph·∫°m H·ªØu Trung
        - **Li√™n H·ªá**: [GitHub Repo](https://github.com/dimteam/cNCTech-ai-pro)
        - **IMS Lab**: ƒêH B√°ch Khoa H√† N·ªôi

        ### ‚ö†Ô∏è L∆∞u √ù
        - ƒê·∫£m b·∫£o k·∫øt n·ªëi MQTT ho·∫∑c ERP ·ªïn ƒë·ªãnh.
        - C·∫•u h√¨nh Telegram trong `secrets.toml` ƒë·ªÉ nh·∫≠n c·∫£nh b√°o.
        - Li√™n h·ªá h·ªó tr·ª£ qua [support@cnctech.vn](mailto:support@cnctech.vn).
        """, unsafe_allow_html=True)

# Footer
st.markdown("""
<div style='text-align: center; margin-top: 50px;'>
    <p style='color: #ffffff; font-size: 14px;'>¬© 2025 DIM Team - IMS Lab | Powered by CNCTech AI Pro</p>
    <p style='color: #d32f2f; font-size: 12px;'>Phi√™n b·∫£n 2.0 | Ph√°t tri·ªÉn cho CNCTech & HUST 2025</p>
</div>
""", unsafe_allow_html=True)